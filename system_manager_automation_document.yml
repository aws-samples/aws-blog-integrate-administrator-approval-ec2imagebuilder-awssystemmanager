# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
# This sample, non-production-ready template describes an SSM Automation document.  
# Â© 2022 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.  
# This AWS Content is provided subject to the terms of the AWS Customer Agreement available at  
# http://aws.amazon.com/agreement or other written agreement between Customer and either
# Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.

AWSTemplateFormatVersion: 2010-09-09
Description: >
  This CloudFormation template creates a System Manager Automation runbook that will orchestrate a process to integrate administrator approval in an EC2 Image builder pipeline, before sharing the
  outputs with selected principals. Be aware that the Template is not production ready.
  You need to remove the (optional) steps that you don't need. 
  Also, notice that there is no mechanims in this automation document to prevent sharing with unauthorized principals. 
  You must handle this before using that template in production. Ideas are discussed in the associated blog post.
  Note that some IAM actions are defined with the condition "StringEquals:'aws:ResourceTag/owner': golden-ami-automation" in order to further control access. 
  Make sure to add this tag to the SNS Topic and the RAM resources share that you provide.
  If you wish to change the take, ensure you replace all mention of this tag in this template.

Resources:

  AutomationRole:
    Type: AWS::IAM::Role
    Metadata:
      Comment: Role to be used by System Manager when executing the automation.
    Properties:
      Policies:
        - PolicyName: ssmAutomationInline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - 'ram:AssociateResourceShare'
                  - 'sns:Publish'
                Resource: 
                - !Sub 'arn:aws:ram:${AWS::Region}:${AWS::AccountId}:resource-share/*'
                - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*'
                Condition:
                  StringEquals:
                    'aws:ResourceTag/owner': golden-ami-automation
              - Effect: Allow
                Action: 
                  - 'ec2:ModifyImageAttribute'
                Resource: !Sub 'arn:aws:ec2:${AWS::Region}::image/*'                                    
              - Effect: Allow
                Action: 
                  - 'imagebuilder:GetImage'
                Resource: !Sub 'arn:aws:imagebuilder:${AWS::Region}:${AWS::AccountId}:image/*'                                    
              - Effect: Allow
                Action: 
                  - 'imagebuilder:StartImagePipelineExecution'
                Resource: !Sub 'arn:aws:imagebuilder:${AWS::Region}:${AWS::AccountId}:image-pipeline/*'                                    
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
        Version: "2012-10-17"
      Path: /executionServiceSSMRole/



  EC2BuilderAutomation:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: "0.3"
        description: "Image Builder pipeline orchestration"
        assumeRole: !GetAtt AutomationRole.Arn
        parameters:
          ImageBuilderPipelineArn:
            description: (Required) Corresponding EC2 Image Builder Pipeline to execute.
            type: String
          PipelineApproverArn:
            description: (Required) Arn of the Role that must approve the built image.
            type: StringList
          SnsNotificationArn:
            description: (Required) Arn of the SNS topics for notifications.
            type: String
          ResourceShareArn:
            description: (Optional) Arn of the resource share to use to share EC2 Builder images. Used in Step 7. If not necessary, this parameter must be removed along with the corresponding step.
            type: String
          AMIPrincipals:
            description: (Optional) The EC2 AMI will be shared with this list of principals. Enter Account IDs. Used in Step 8. If not necessary, this parameter must be removed along with the corresponding step.
            type: StringList

        mainSteps:
          - name: executeImageCreation #Step 1 - Launch the pipeline
            action: aws:executeAwsApi
            maxAttempts: 2
            timeoutSeconds: 1800
            onFailure: Abort
            inputs:
              Service: imagebuilder
              Api: StartImagePipelineExecution
              imagePipelineArn: '{{ ImageBuilderPipelineArn }}'
            outputs:
            - Name: imageBuildVersionArn
              Selector: $.imageBuildVersionArn
              Type: String
            nextStep: waitImageBuildingComplete

          - name: waitImageBuildingComplete #Step 2 - Wait for the image to be in the status "AVAILABLE" or "FAILED"
            action: aws:waitForAwsResourceProperty
            maxAttempts: 2
            timeoutSeconds: 7200
            onFailure: Abort
            inputs:
              Service: imagebuilder
              Api: GetImage
              imageBuildVersionArn: '{{ executeImageCreation.imageBuildVersionArn }}'
              PropertySelector: image.state.status
              DesiredValues: 
                - AVAILABLE
                - FAILED
            nextStep: getBuildStatus

          - name: getBuildStatus #Step 3 - Get the status of the built image. It can be FAILED or AVAILABLE
            action: aws:executeAwsApi
            maxAttempts: 2
            timeoutSeconds: 1800
            onFailure: Abort
            inputs:
              Service: imagebuilder
              Api: GetImage
              imageBuildVersionArn: '{{ executeImageCreation.imageBuildVersionArn }}'
            outputs:
            - Name: status
              Selector: $.image.state.status
            nextStep: continueIfImageAvailable

          - name: continueIfImageAvailable #Step 4 - Continue the process or, go directly to the last step
            action: aws:branch
            maxAttempts: 2
            timeoutSeconds: 1800
            onFailure: Abort
            inputs:
              Choices:
              - NextStep: waitForAdministratorApproval
                Variable: '{{getBuildStatus.status}}'
                StringEquals: AVAILABLE
              Default:
                postProcessing

          - name: waitForAdministratorApproval #Step 5 - Wait administrator to approve the newly built image
            action: aws:approve
            timeoutSeconds: 604800 #7 days
            maxAttempts: 2
            onFailure: Abort
            inputs:
              NotificationArn: '{{ SnsNotificationArn }}'
              Message: "Approval request for Core Golden AMI"
              MinRequiredApprovals: 1
              Approvers: '{{ PipelineApproverArn }}'
            nextStep: getBuiltImage

          - name: getBuiltImage #Step 6 - Get the ID of the newly created image
            action: aws:executeAwsApi
            maxAttempts: 2
            timeoutSeconds: 1800
            onFailure: Abort
            inputs:
              Service: imagebuilder
              Api: GetImage         
              imageBuildVersionArn: '{{ executeImageCreation.imageBuildVersionArn }}'
            outputs:
            - Name: imageId
              Selector: $.image.outputResources.amis[0].image
              Type: String

          - name: shareEC2BuilderImage #Step 7 - Share the EC2 Builder Source Image with the defined list of principals, using Resource access Manager. 
            action: aws:executeAwsApi
            maxAttempts: 2
            timeoutSeconds: 1800
            onFailure: step:shareEC2AMIImage
            inputs:
              Service: ram
              Api: AssociateResourceShare
              resourceShareArn: '{{ ResourceShareArn }}'
              resourceArns: ['{{ executeImageCreation.imageBuildVersionArn }}']

          - name: shareEC2AMIImage #Step 8 - Give launch permission to the defined list of principals. 
            action: aws:executeAwsApi
            maxAttempts: 2
            timeoutSeconds: 1800
            onFailure: step:postProcessing
            inputs:
              Service: ec2
              Api: ModifyImageAttribute
              ImageId: '{{ getBuiltImage.imageId }}'
              OperationType: add
              Attribute: launchPermission
              UserIds: ['{{ AMIPrincipals }}']

          - name: postProcessing #Step 9 Send a notification with a summary of the operation
            action: 'aws:executeAwsApi'
            inputs:
              Service: sns
              Api: Publish
              Subject: 'Golden Image Automation Runbook Ended in {{ global:REGION }}'
              Message: 'The automation runbook {{ automation:EXECUTION_ID }} completed at {{ global:DATE_TIME }} - Image build : {{ getBuildStatus.status }} '
              TopicArn: '{{ SnsNotificationArn }}'

